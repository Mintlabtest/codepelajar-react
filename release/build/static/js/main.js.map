{"version":3,"sources":["libraries/index.js","components/atoms/Section/index.js","components/atoms/Container/index.js","components/atoms/View/index.js","components/atoms/Text/index.js","components/atoms/Anchor/index.js","components/atoms/Image/index.js","config/api/config.js","config/api/url.js","config/api/index.js","services/index.js","utils/index.js","components/organisms/FeatureBlock/index.js","containers/FeaturePost/index.js","elements/index.js","serviceWorker.js","index.js"],"names":["Section","className","style","children","props","Container","View","Text","tag","Tag","Anchor","href","title","target","defaultProps","Image","source","width","height","resizeMode","backgroundImage","alt","imageStyleObj","backgroundSize","src","apiInstance","axios","create","baseURL","timeout","validateStatus","status","ApiRequest","route","token","payload","request","params","paramsResult","Object","keys","map","e","push","join","method","Promise","resolve","reject","path","resolveParams","customUrl","url","baseHeaders","type","length","headers","data","body","then","res","catch","err","response","config","api","feed","asset","origin","google","apiKey","blogId","baseUrl","summary","postFeed","post","page","API","blogPost","get","blogSummary","blogPostFeed","blogPage","name","callFeaturedPost","sendPayload","FeatureBlock","init","a","console","log","state","image","description","this","React","PureComponent","FeaturePost","Component","elements","HOME_FEATURED_POST","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77a2e543.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport axios from 'axios';\n\nexport { React, PropTypes, moment, axios };\n\nexport * from 'react';\n","import { React, PropTypes } from 'libraries';\n\nconst Section = ({ className, style, children, ...props }) => (\n  <section className={className} style={style} {...props}>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.any,\n  style: PropTypes.any\n};\n\nexport default Section;\n","import { React, PropTypes } from 'libraries';\n\nconst Container = ({ className, style, children, ...props }) => (\n  <div className={`container ${className}`} style={style} {...props}>\n    {children}\n  </div>\n);\n\nContainer.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.any,\n  style: PropTypes.any\n};\n\nexport default Container;\n","import { React, PropTypes } from 'libraries';\n\nconst View = ({ className, style, children, ...props }) => (\n  <div className={className} style={style} {...props}>\n    {children}\n  </div>\n);\n\nView.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.any,\n  style: PropTypes.any\n};\n\nexport default View;\n","import { React, PropTypes } from 'libraries';\n\nconst Text = ({ className, style, children, tag, ...props }) => {\n  const Tag = tag || 'p';\n  return (\n    <Tag className={className} style={style} {...props}>\n      {children}\n    </Tag>\n  );\n};\n\nText.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.any,\n  style: PropTypes.any,\n  tag: PropTypes.string\n};\n\nexport default Text;\n","import { React, PropTypes } from 'libraries';\n\nconst Anchor = ({\n  href,\n  title,\n  target,\n  children,\n  className,\n  style,\n  ...props\n}) => (\n  <a\n    href={href}\n    title={title}\n    target={target}\n    {...props}\n    className={className}\n    style={style}\n  >\n    {children}\n  </a>\n);\n\nAnchor.propTypes = {\n  href: PropTypes.string,\n  title: PropTypes.string,\n  target: PropTypes.string,\n  children: PropTypes.any,\n  className: PropTypes.any,\n  style: PropTypes.any\n};\n\nAnchor.defaultProps = {\n  href: '#'\n};\n\nexport default Anchor;\n","import { React, PropTypes } from 'libraries';\n\nconst Image = ({\n  source,\n  width,\n  height,\n  resizeMode,\n  backgroundImage,\n  title,\n  alt,\n  className,\n  style,\n  children,\n  ...props\n}) => {\n  if (backgroundImage) {\n    const imageStyleObj = { backgroundImage: `url(${source})` };\n    return (\n      <div\n        title={title}\n        alt={alt}\n        className={className}\n        style={{\n          ...imageStyleObj,\n          ...(width && width),\n          ...(height && height),\n          ...(resizeMode && { backgroundSize: resizeMode }),\n          ...style\n        }}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <img\n      src={source}\n      alt={alt}\n      title={title}\n      className={className}\n      style={style}\n      width={width}\n      height={height}\n      {...props}\n    />\n  );\n};\n\nImage.propTypes = {\n  source: PropTypes.any,\n  width: PropTypes.any,\n  height: PropTypes.any,\n  resizeMode: PropTypes.string,\n  backgroundImage: PropTypes.bool,\n  title: PropTypes.string,\n  alt: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.any,\n  children: PropTypes.any\n};\n\nImage.defaultProps = {\n  backgroundImage: false,\n  alt: 'image',\n  title: 'image'\n};\n\nexport default Image;\n","/* eslint-disable import/no-cycle */\nimport { axios } from 'libraries';\n// eslint-disable-next-line import/no-cycle\n\nexport const apiInstance = axios.create({\n  baseURL: '',\n  timeout: 10000,\n  validateStatus: status => status >= 200 && status < 300\n});\n\nclass ApiRequest {\n  static get(route, token = false) {\n    return payload => this.request('GET', route, payload, token);\n  }\n\n  static put(route, token = false) {\n    return payload => this.request('PUT', route, payload, token);\n  }\n\n  static post(route, token = false) {\n    return payload => this.request('POST', route, payload, token);\n  }\n\n  static delete(route, token = false) {\n    return payload => this.request('DELETE', route, payload, token);\n  }\n\n  static patch(route, token = false) {\n    return payload => this.request('PATCH', route, payload, token);\n  }\n\n  static resolveParams(params) {\n    const paramsResult = [];\n    Object.keys(params).map(e => paramsResult.push(`${e}=${params[e]}`));\n    return paramsResult.join('&');\n  }\n\n  static request(method, route, payload = {}, token) {\n    return new Promise((resolve, reject) => {\n      const path = payload.path ? `/${payload.path}` : '';\n      const params = payload.params\n        ? `?${this.resolveParams(payload.params)}`\n        : '';\n      const customUrl = payload.url ? payload.url : '';\n      const baseHeaders = {\n        'Content-Type':\n          payload.type === 'form-data'\n            ? 'multipart/form-data'\n            : 'application/json'\n      };\n      apiInstance\n        .request({\n          url: customUrl.length > 0 ? customUrl : route + path + params,\n          method,\n          headers: payload.headers\n            ? { ...baseHeaders, ...payload.headers }\n            : baseHeaders,\n          data: payload.body ? payload.body : {}\n        })\n        .then(res => {\n          resolve(res);\n        })\n        .catch(err => {\n          if (err && err.response) {\n            reject(err.response);\n          } else if (err) {\n            reject(err);\n          }\n        });\n    });\n  }\n}\n\nexport default ApiRequest;\n","const development = {\n  url: {\n    api: 'https://www.googleapis.com/blogger/v3',\n    feed: 'https://nextcodepelajar.blogspot.com/feeds',\n    asset: 'https://nextcodepelajar.blogspot.com',\n    origin: 'https://nextcodepelajar.blogspot.com'\n  },\n  google: {\n    apiKey: 'AIzaSyB2MpzH-Gq6fnWuUnoI2PH2sPMTkGIQ9b0',\n    blogId: '5624631557745671504'\n  }\n};\n\nconst production = {\n  url: {\n    api: 'https://www.googleapis.com/blogger/v3',\n    feed: 'https://www.codepelajar.com/feeds',\n    asset: 'https://www.codepelajar.com',\n    origin: 'https://www.codepelajar.com'\n  },\n  google: {\n    apiKey: 'AIzaSyB2MpzH-Gq6fnWuUnoI2PH2sPMTkGIQ9b0',\n    blogId: '3190947245348881579'\n  }\n};\n\nexport const config = development;\n\nconst baseUrl = {\n  summary: `${config.url.feed}/posts/summary`,\n  postFeed: `${config.url.feed}/posts/default`,\n  post: `${config.url.api}/blogs/${config.google.blogId}/posts`,\n  page: `${config.url.api}/blogs/${config.google.blogId}/pages`\n};\n\nexport default baseUrl;\n","import ApiRequest from './config';\nimport baseUrl from './url';\n\nconst API = {};\n\nAPI.blogPost = ApiRequest.get(baseUrl.post);\nAPI.blogSummary = ApiRequest.get(baseUrl.summary);\nAPI.blogPostFeed = ApiRequest.get(baseUrl.postFeed);\nAPI.blogPage = ApiRequest.get(baseUrl.page);\n\nexport default API;\n","import { API } from 'config';\n\n/**\n * GET FEATURED POST DATA\n */\nexport const callFeaturedPost = (payload = {}) => {\n  const sendPayload = {\n    ...payload,\n    params: {\n      alt: 'json',\n      'max-results': 1,\n      ...(payload.params && payload.params)\n    }\n  };\n  return API.blogSummary(sendPayload)\n    .then(response => response)\n    .catch(err => {\n      throw err;\n    });\n};\n","export const elementId = name => document.getElementById(name);\n","import { React, PropTypes } from 'libraries';\nimport { View, Text, Anchor, Image } from 'components/atoms';\nimport { callFeaturedPost } from 'services';\n\nconst dummy = {\n  title: 'Dokumentasi Simpel Template Black Clover',\n  image:\n    'https://2.bp.blogspot.com/-_EVYfMGHtDU/W2Vd0vSfVRI/AAAAAAAABOk/NuOGcRH2eI4o5R9fNUN8dmXjrmcYwjSWQCPcBGAYYCw/s1600/2b31cd88f286a2c063c58aa2176fdc30.png'\n};\n\nclass FeatureBlock extends React.PureComponent {\n  static propTypes = {\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      image: '',\n      description: ''\n    };\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  init = async () => {\n    try {\n      const res = await callFeaturedPost();\n      console.log('TCL: FeatureBlock -> init -> res', res);\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  render() {\n    const { title, description, image } = this.props;\n    return (\n      <View className=\"o-feature-block__wrapper\">\n        <View className=\"o-feature-block__column\">\n          <View className=\"o-feature-block__inner\">\n            <Image source={image} backgroundImage title={title} alt={title} />\n          </View>\n        </View>\n        <View className=\"o-feature-block__column\">\n          <View className=\"o-feature-block__inner\">\n            <Anchor>\n              <Text tag=\"h2\" className=\"o-feature-block__title\">\n                {title}\n              </Text>\n            </Anchor>\n            <Text className=\"o-feature-block__description\">{description}</Text>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default FeatureBlock;\n","import { React } from 'libraries';\nimport { Section, Container, FeatureBlock } from 'components';\n\nclass FeaturePost extends React.Component {\n  render() {\n    return (\n      <Section className=\"home-feature\">\n        <Container>\n          <FeatureBlock />\n        </Container>\n      </Section>\n    );\n  }\n}\n\nexport default FeaturePost;\n","import { elementId } from '../utils';\n\nconst elements = {\n  HOME_FEATURED_POST: elementId('HomeFeaturedPost')\n};\n\nexport default elements;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { FeaturePost } from 'containers';\nimport elements from './elements';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<FeaturePost />, elements.HOME_FEATURED_POST);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}